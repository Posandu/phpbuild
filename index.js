import o from"fs-extra";import n from"path";import e from"chalk";import{dirname as i}from"path";import{fileURLToPath as r}from"url";import c from"sass";import t from"clean-css";import s from"esbuild";import l from"md5-file";const p=i(r(import.meta.url)),m=(o,n)=>{const i=performance.now();console.log(e.green(`${o} started`));try{n()}catch(n){return console.log(e.red(`${o} failed`)),void console.log(n)}console.log(e.green(`${o} done in ${(performance.now()-i).toFixed(2)}ms`))},y=n.join(p,"src"),a=n.join(p,"dist"),d=n.join(y,"scss"),f=o.readdirSync(d),g=n.join(y,"js"),u=o.readdirSync(g),h=o=>l.sync(o);m("clean",(()=>{o.emptyDirSync(a)})),m("compile scss",(()=>{f.forEach((i=>{if(!i.endsWith(".scss"))return void console.log(e.yellow(`Ignoring ${i}`));if("_"===i.charAt(0))return;const r=n.join(d,i),s=h(r).substring(0,8);let l=c.compile(r);l=(new t).minify(l.css);const p=n.join(a,`${s}.css`);try{o.writeFileSync(p,`/* ${s}.css */ \n ${l.styles}`),console.log(e.green(`${e.gray(i+" compiled")} ${s}`))}catch(o){}0===l.styles.length&&(console.log(e.yellow(`${r} output is empty`)),o.unlinkSync(p))}))})),m("compile js",(()=>{u.forEach((i=>{if(!i.endsWith(".js"))return void console.log(e.yellow(`Ignoring ${i}`));if("_"===i.charAt(0))return;const r=n.join(g,i),c=h(r).substring(0,8),t=n.join(a,`${c}.js`);try{s.build({bundle:!0,outfile:t,minify:!0,sourcemap:!1,entryPoints:[r]}),console.log(e.green(`${e.gray(i+" compiled")} ${c}`))}catch(o){}0===o.readFileSync(r).length&&(console.log(e.yellow(`${r} output is empty`)),o.unlinkSync(t))}))})),m("copy public to dist",(()=>{o.copySync(n.join(y,"public"),a)})),m("copy php to dist",(()=>{o.copySync(n.join(y,"php"),a);o.readdirSync(n.join(y,"php")).forEach((e=>{if(e.endsWith(".php")){const i=n.join(y,"php",e),r=n.join(a,e),c=o.readFileSync(i,"utf8");let t=`<?php /* ${h(i)} */ ?> \n ${c}`;o.writeFileSync(r,t)}}))}));
